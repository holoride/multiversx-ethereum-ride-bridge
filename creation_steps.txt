(all commands from root of project)
prerequisites (from root):
    - cp .mnemonic.sample .mnemonic
    - put mnemonic in file .mnemonic
    - install mxpy
    - nvm use 11 && npm install bip39-cli
    - source .env
    - MNEMONIC is now equal to your mnemonic

to get first erc20 account from mnemonic into keyfile "wallets/ethereum.sk":
line=$(bip39-cli accounts --count 1 $MNEMONIC) && arr=(`echo ${line}`) && echo ${arr[2]} >> ethereum.sk && mv ethereum.sk wallets/

to get mx account into keyfile "wallets/multiversx.pem":
mxpy wallet convert --infile .mnemonic --outfile multiversx.pem --in-format raw-mnemonic --out-format pem --address-index 0 && mv multiversx.pem wallets/

eth
    - cd sol
    - yarn set version latest
    - yarn install
    - yarn compile
    - mv .env.example .env
    - add INFURA_API_KEY, MNEMONIC, RELAYER_ADDR_0-N to .env file
    - source .env

    - deploy safe
        task: deploy/safe.ts
            will:
                - deploy safe
                - set data on config file
        command: npx hardhat --network sepolia deploy-safe

    - deploy bridge, whitelist relayers
        task: deploy/bridge.ts
            takes:
                - relayer addresses
                - quorum (default 3)
            will:
                - deploy bridge with params
                - set data on config file
        command: yarn hardhat --network sepolia deploy-bridge --relayer-addresses '['\"$RELAYER_ADDR_0\"']' --quorum 1
    
    
    - whitelist bridge on safe
        task: deploy/set-bridge-on-safe.ts
            will:
                - do dat
        command: npx hardhat --network sepolia set-bridge-on-safe

    - create and whitelist token on safe
        task: deploy/deploy-whitelist-token.ts
            will:
                - do dat
        command: npx hardhat --network sepolia deploy-whitelist-token 

    - unpause safe
        task: deploy/unpause-safe.ts

    - unpause bridge
        task: deploy/unpause-bridge.ts

    - init supply on safe
        task: deploy/init-supply.ts
        command: AMOUNT={amount of RIDE supply for swapping} && npx hardhat --network sepolia init-supply --amount $AMOUNT

    - open setup.config.json
    - copy tokens[0] for multiversx


multiversx
docs info:
    rs/docs/setup.md
    - cd rs
    - copy tokens[0] from previous step into multisig/interaction/config/configs.cfg:ERC20_TOKEN
    - install
       - rustup install nightly
       - cargo +nightly build
       - ./build-wasm.sh
    - deploy contracts
        - NOTE: wait 10-15 secs between calls, or check on chain to see if the tx went through. some txes have dependencies on earlier executions so you must wait for each one to complete.
        - after each deploy, configs.cfg will be updated automatically.
        - cd multisig/interaction
        - mkdir walletsRelay
        - move deployer key in walletsRelay as alice.pem
        - ensure deployer key has EGLD
        - deploy aggregator contract
            - command: ./script.sh deploy-aggregator
            - what:
                deploys aggregator contract (used to get eth fees)
        - deploy bridge tokens wrapper
            - ./script.sh deploy-wrapper
        - deploy bridge contracts
            - ./script.sh deploy-bridge-contracts
            - what:
                deploys the safe (where users deposit to),
                deploys the MultiTransfer contract
                deploys the multisig (controller contract, multisig for the relayers)
        - whitelist token
            - command: ./script.sh whitelist-token
              what:  
                - issues universal and chain-specific token
        - add relayer
            - command ./script.sh add-relayer
            - paste in relayer address
        - unpause contracts
            - command ./script.sh unpause-contracts

relayer
    - cd bridge
    - get key for relayer
        - cp ../wallets/multiversx.pem cmd/bridge/keys
        - cp ../wallets/ethereum.sk cmd/bridge/keys
    - config 
        - update cmd/bridge/config/config.toml with addresses created
    - build
        - install go >= 1.17.6
        - make build
    - run
        - cd cmd/bridge && ./bridge

to execute deposit (eth side):
    - cd sol
    - AMOUNT={amount to deposit (w/ 6 decimals)}
    - ADDRESS={multiversx address to send to}
    - npx hardhat --network sepolia deposit --amount $AMOUNT --receiver $(mxpy wallet bech32 --decode $ADDRESS)
    - wait a bit, should show in bridge and then in your wallet.
    
to execute deposit (mx side):
    - cd rs/multisig/interaction
    - ./script.sh create-safe-transaction
    - enter amount to transfer


admin:
    add relayer:
        eth:
            RELAYER_ADDR={address to add} && cd sol && yarn hardhat --network sepolia add-relayer --address $RELAYER_ADDR
        mx:
            
            
    remove relayer:
            RELAYER_ADDR={address to remove} && cd sol && yarn hardhat --network sepolia add-relayer --address $RELAYER_ADDR

TODO:
    - RIDE <-> WRIDE 1:1 swap  - asked, let's see
    - extra quorum + relayers (2/3)
    - staking
    - adding new relayers (from admin)
        - add-relayer in sol, 
        
    - bridge pause (from admin)
    - multisig (for admin)

    - I think we could use the bridge for swapping RIDE and WRIDE aswell, not just WRIDE and ETHRIDE
    - but first see about the other contract


    

